{%sage:mysage

import networkx

g = Graph(networkx.gnp_random_graph(7,0.3,seed=@@qengine.randomseed@@))

while len(g.spanning_trees()) <5 or len(g.spanning_trees())>20:
    g = Graph(networkx.gnp_random_graph(7,0.3))

gp = g.plot()
_graphfile = save(gp,'.png',{})

answer = len(g.spanning_trees())

# example of a bad save, g is not a graphics object
# _test = save(g,'.jpg',{})

%}

{%qcss:mycss
	.opaque_test { background-color: azure }
%}

{%files:myfiles
	http://www.sagemath.org/pix/sage_logo_new_l_hc_edgy-nq8.png
	sagemath-v2.png
%}

{%qhtml:myhtml

<div class="opaque_test">
	<h4>Introduction</h4>
	<p>
		Qengine is a framework for generating and combining resources into a quiz, which is then delivered to an LMS.<br><br>
		In this example, a network graph is generated with SageMath using a random number assigned at the start of this quiz. That means every student will receive a different version of this question. The answer is also determined when generating the question, so grading is automatic.<br>
	</p><br>
	<h4>Terminology</h4><br>
	<p>
		<b>Blocks</b> are containers that run a program to generate content. In this example, the Sage block is used, which can run SageMath code.<br><br>
		<b>Variables</b> are primitive values or data structures generated by code (like numbers, text, arrays, etc.)<br><br>
		<b>Resources</b> are media content (like images, audio, javascript, etc.)
	</p><br>
	<h4>Resources</h4>
	<p>
		Existing resources are fetched using the <b>files</b> block. They can either be:
		<ol>
			<li>local images (in the same folder as the question file)</li>
			<li>remote images (a url)</li>
			<li>dynamic images (generated by a block)</li>
		</ol>
	</p><br>
	<table>
		<tr valign="top">
			<td>
				A local image:<br><img src="%%RESOURCES%%sagemath-v2.png" width="100">
			</td>
			<td>
				A remote image:<br><img src="%%RESOURCES%%sage_logo_new_l_hc_edgy-nq8.png" width="300">
			</td>
		</tr>
	</table><br>
    <p>A SageMath generated image for this question:<br>
    	<img src="%%RESOURCES%%@@mysage._graphfile@@"></script>
    </p><br>
    <h4>Variables</h4><br>
    <p>
    	<ol>
    		<li>Qengine scans all of your blocks for any requested variables, which are wrapped in "@@"</li>
			<li>Then it runs each block, storing any requested variables that it knows will be used in later blocks.</li>
		</ol>
    </p><br>
    <p>
    	If a resource is generated, a variable starting with an underscore must have the path/url to fetch the variable.<br><br>
    	<ol>
    		<li>Requested Variable: <code>namespace.variable</code></li>
    		<li>Requested Resource: <code>namespace._variable</code></li>
    	</ol>
    </p><br>
    <p>
    	The namespace "qengine" is reserved for variables created by the LMS or Qengine:<br><br>
    	<code>qengine.randomseed = @@qengine.randomseed@@</code>
    </p><br>
    <p>
    	You can store variables for use in later question steps using a <b>qstore</b> block, which automatically creates encrypted hidden html input elements. If you inspect the HTML, you'll find hidden input elements attached at the bottom of this stuff.<br><br>
    	In this example, the answer to the question below is stored using the qstore block:<br><br>
    	<code>mysage.answer = @@mysage.answer@@</code>
    </p><br>
    <h4>Question HTML &amp; Shortcodes</h4><br>
    <p>
    	Questions are written as HTML forms. Form input elements must be formatted correctly, thus convenient shortcodes exist to generate them for you. You must wrap them in "~~~". Currently, they are:<br>
    	<ol>
    		<ul>name:NUMBER:placeholder</ul>
    		<ul>name:TEXT:placeholder</ul>
    		<ul>name:SELECT:option,option,option</ul>
    		<ul>name:SUBMIT:text</ul>
    		<ul>name:RESET:text</ul>
    	</ol>
    	Those shortcodes will generate a number input, text input, dropdown selection, submit button, and reset form values button, respectively.
    </p><br>
    <h4>SageMath Code</h4><br>
    <p>
    	Below is the code used to generate the SageMath content for this question.
    </p><br>
    <code style="display:inherit;background-color:cyan"><pre>
# this code is in a "sage" block with a namespace of "mysage"

import networkx

g = Graph(networkx.gnp_random_graph(7,0.3,seed=@@qengine.randomseed@@))

while len(g.spanning_trees()) <5 or len(g.spanning_trees())>20:
    g = Graph(networkx.gnp_random_graph(7,0.3))

gp = g.plot()
_graphfile = save(gp,'.png',{})

answer = len(g.spanning_trees())
    </pre></code>
    <br>
    <h4>Test Functionality</h4>
    <p>
    	To test Qengine functionality, enter the number of spanning trees in the graph above... been awhile? The answer is: <code>@@mysage.answer@@</code>. Or, enter anything else to see the response to an incorrect answer.
    </p>
    <p>
    	Answer: <input type="text" name="%%IDPREFIX%%myq.answer" value="" placeholder="Answer"><br>
    </p>
    <p>
    	Your question can have multiple fields. Below is another one. Enter 0 below for a correct answer.
    </p>
    <p>
    	Answer: ~~~myq.guess:TEXT:Answer~~~
    </p>
    <p>
    	<input type="submit" name="%%IDPREFIX%%mynm.submit" value="Submit">
	</p>
</div>

%}

{%qstore:mystore
	temp.qengine.randomseed
	perm.mysage.answer
%}

@@@@mynm.submit

{%python2:mypython

customResult = ((@@mysage.answer@@ == @@myq.answer@@) * 0.5) + ((0 == @@myq.guess@@) * 0.5)
qresult = qengine.grade({'myq':{'accept':2,'grading':"linear",'match':2,'percentage':100,'margin':3,'values':[@@mysage.answer@@,0]}},{'myq':[@@myq.answer@@,@@myq.guess@@]})

%}

{%qans:myqans
	@@mypython.qresult@@
%}

{%qhtml:myresponse

<div class="opaque_test">
        <p>
            The correct SageMath answer is @@mysage.answer@@. You entered @@myq.answer@@.<br>
            The correct 2nd answer is 0. You entered @@myq.guess@@. 
        </p><br>
        <h4>Built In Grading Function</h4>
        <p>
        	This question scored a <b>@@mypython.qresult@@</b><sup>*</sup> using the built in qengine.grade() function in the python2.7 block.
        </p>
        <p>
        	The settings used were:<br>
        	<ol>
        		<li>accept:2 - accept 2 student answers for this question</li>
        		<li>grading:linear - if the answer is wrong, but within the margin of error, assign points based on a linear scale</li>
        		<li>match:2 - submitted answers must match 2 correct answers</li>
        		<li>percentage:100 - grading this part is worth 100% of the total question</li>
        		<li>margin:3 - the margin of error for this question</li>
        		<li>values:[@@mysage.answer@@,0] - the correct answers to this question</li>
        	</ol>
        </p><br>
        <h4>Custom Grading Code</h4>
        <p>
        	You can also grade the question using your own custom code, like the python code below:
        </p>
        <code style="display:inherit;background-color:cyan">
        	<pre>customResult = ((@@mysage.answer@@ == @@myq.answer@@) * 0.5) + ((0 == @@myq.guess@@) * 0.5)</pre>
        </code>
		<p>
			That scored a <b>@@mypython.customResult@@</b> with custom grading code in a python2.7 block.
        </p>
        <br>
        <p style="font-size:0.8em;">
                <sup>*</sup> Opaque protocol grades on a scale from 0 to 1. That is converted by your LMS to the final grade you want to record.
        <p>
</div>

%}

@@@@

Everything here is ignored because a result is returned in the previous step, which means this question step will never be reached.

PYTHON GRADING FUNCTION:
	accept		: number of student answers to accept (mainly to prevent hacking, student sending more answers than expected)
	grading		: "bool" = full/no credit | "linear" = range of credit depending on how accurate the answer is
	match		: number of question answers the student must match for full credit
	percentage	: 1-100, how much this one part is worth for the entire question
	margin		: the range of acceptable answers. ! use a number for numerical answers & use a percentage 1-100 for string answers
					number answer - example: question answer is 5, margin is 3, any answer between 2 - 8 is is awarded credit
					string answer - example: question answer is "hello world", margin is 10, 
	values		: array ("list") of answers for the question

SHORTCODES:
	~~~name:CHECKBOX:value,text~~~
	~~~name:NUMBER:placeholder~~~
	~~~name:TEXT:placeholder~~~
	~~~name:SELECT:option,option,option~~~
	~~~name:MULTIPLE:option,option,option~~~
	~~~name:SUBMIT:text~~~
	~~~name:RESET:text~~~
	
